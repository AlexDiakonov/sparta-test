{"ast":null,"code":"var _jsxFileName = \"/Users/odiakonov/Desktop/testTask/sparta-test/src/components/ToDoItem/ToDoItem.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ToDoItem = _ref => {\n  _s();\n  let {\n    id,\n    task,\n    done,\n    handleUpdate,\n    handleDone,\n    handleRemove\n  } = _ref;\n  const [editMode, setEditMode] = useState(false);\n  const [updatedTask, setUpdatedTask] = useState(task);\n  const handleSave = () => {\n    if (updatedTask.trim() !== \"\") {\n      handleUpdate(id, updatedTask);\n      setEditMode(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: editMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: updatedTask,\n        onChange: e => setUpdatedTask(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          textDecoration: done ? \"line-through\" : \"none\"\n        },\n        children: task\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDone(id),\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setEditMode(true),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRemove(id),\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(ToDoItem, \"tFkFevP/RQn9qAk0MX4iQm4h5kk=\");\n_c = ToDoItem;\nexport default ToDoItem;\nvar _c;\n$RefreshReg$(_c, \"ToDoItem\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","ToDoItem","_ref","_s","id","task","done","handleUpdate","handleDone","handleRemove","editMode","setEditMode","updatedTask","setUpdatedTask","handleSave","trim","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","textDecoration","_c","$RefreshReg$"],"sources":["/Users/odiakonov/Desktop/testTask/sparta-test/src/components/ToDoItem/ToDoItem.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { ToDoItemI } from \"../../interfaces/ToDoItem\";\n\nconst ToDoItem: React.FC<ToDoItemI> = ({\n  id,\n  task,\n  done,\n  handleUpdate,\n  handleDone,\n  handleRemove,\n}) => {\n  const [editMode, setEditMode] = useState(false);\n  const [updatedTask, setUpdatedTask] = useState<string>(task);\n\n  const handleSave = () => {\n    if (updatedTask.trim() !== \"\") {\n      handleUpdate(id, updatedTask);\n      setEditMode(false);\n    }\n  };\n\n  return (\n    <li>\n      {editMode ? (\n        <>\n          <input\n            type=\"text\"\n            value={updatedTask}\n            onChange={(e) => setUpdatedTask(e.target.value)}\n          />\n          <button onClick={handleSave}>Save</button>\n        </>\n      ) : (\n        <>\n          <span\n            style={{\n              textDecoration: done ? \"line-through\" : \"none\",\n            }}\n          >\n            {task}\n          </span>\n          <button onClick={() => handleDone(id)}>Done</button>\n          <button onClick={() => setEditMode(true)}>Edit</button>\n          <button onClick={() => handleRemove(id)}>Remove</button>\n        </>\n      )}\n    </li>\n  );\n};\n\nexport default ToDoItem;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGxC,MAAMC,QAA6B,GAAGC,IAAA,IAOhC;EAAAC,EAAA;EAAA,IAPiC;IACrCC,EAAE;IACFC,IAAI;IACJC,IAAI;IACJC,YAAY;IACZC,UAAU;IACVC;EACF,CAAC,GAAAP,IAAA;EACC,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAASS,IAAI,CAAC;EAE5D,MAAMS,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIF,WAAW,CAACG,IAAI,EAAE,KAAK,EAAE,EAAE;MAC7BR,YAAY,CAACH,EAAE,EAAEQ,WAAW,CAAC;MAC7BD,WAAW,CAAC,KAAK,CAAC;IACpB;EACF,CAAC;EAED,oBACEb,OAAA;IAAAkB,QAAA,EACGN,QAAQ,gBACPZ,OAAA,CAAAE,SAAA;MAAAgB,QAAA,gBACElB,OAAA;QACEmB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEN,WAAY;QACnBO,QAAQ,EAAGC,CAAC,IAAKP,cAAc,CAACO,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAChD,eACF3B,OAAA;QAAQ4B,OAAO,EAAEZ,UAAW;QAAAE,QAAA,EAAC;MAAI;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA,gBACzC,gBAEH3B,OAAA,CAAAE,SAAA;MAAAgB,QAAA,gBACElB,OAAA;QACE6B,KAAK,EAAE;UACLC,cAAc,EAAEtB,IAAI,GAAG,cAAc,GAAG;QAC1C,CAAE;QAAAU,QAAA,EAEDX;MAAI;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACA,eACP3B,OAAA;QAAQ4B,OAAO,EAAEA,CAAA,KAAMlB,UAAU,CAACJ,EAAE,CAAE;QAAAY,QAAA,EAAC;MAAI;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eACpD3B,OAAA;QAAQ4B,OAAO,EAAEA,CAAA,KAAMf,WAAW,CAAC,IAAI,CAAE;QAAAK,QAAA,EAAC;MAAI;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eACvD3B,OAAA;QAAQ4B,OAAO,EAAEA,CAAA,KAAMjB,YAAY,CAACL,EAAE,CAAE;QAAAY,QAAA,EAAC;MAAM;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;EAE3D;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAET,CAAC;AAACtB,EAAA,CA7CIF,QAA6B;AAAA4B,EAAA,GAA7B5B,QAA6B;AA+CnC,eAAeA,QAAQ;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}